{"name":"Wells Fargo Analytics Competition","tagline":"","body":"### Objectives\r\nThe initial objectives of the competition were to find and associate different words with different banks.  The words were then used to determine what main issues or topics the customers were posting about.  In order to do that, the data would have to be separated by positive and negative comments and then the data could be sorted to show the main topics of posts.  After being associated with a bank and topic, the topics should be sifted through to find relevant data.\r\n\r\n\r\n### Overview\r\nThe data consisted of Twitter and Facebook feeds that had to be cleaned up before being analyzed.  The ASCII characters, white space, and modifiers were removed and underwent natural language processing to normalize the data and clean it.  The normalizing and cleaning make sure the data are all of the same type and have no typos or mistakes.  Then using sentiment analysis, the data was separated into positive and negative posts and then further separated by bank.  The banks were then compared to each other using dendrograms and word clouds to determine common topics between banks.  After cleaning the data, the list contained 160 words that were used over 2000 times.  This was further narrowed by getting rid of useless entries, obscured data, and meta-tags and the list was narrowed down to a list of 70 words.  These words were then analyzed according to frequency used and word clouds were used to show this relationship.\r\n\r\n\r\n### Focus\r\n    There were main points that were focused on as we went through the coding;\r\n          * Complaints of unfair policies/fees/charges \r\n          * Customer attrition \r\n          * Unresolved issues \r\n          * Appeal to higher authority\r\n          * Negative perceptions of services rendered\r\n          * Exceptional Service\r\n\r\n\r\n### Code\r\n1. `dynamicRequire <- function(reqPackages){`\r\n1.   `for(pkg in reqPackages ){`\r\n1.     `if(!require(pkg, character.only = TRUE)){`\r\n1.       `install.packages(pkg, dependencies = TRUE)  `\r\n1.       `require(pkg, quietly = TRUE, character.only = TRUE) `\r\n1.     `}`\r\n1.   `}`\r\n1. `}`\r\n1. `reqPackages <- c(\"plyr\", \"tm\", \"quanteda\", \"stringr\", \"ggplot2\",`\r\n1.                  `\"lsa\",\"NLP\", \"openNLP\", \"SnowballC\", \"lsa\", \"tau\",`\r\n1.                  `\"RColorBrewer\", \"wordcloud\")`\r\n1. `dynamicRequire(reqPackages)`\r\n1. `myStopWords <- as.character(read.csv(\"myStopWords.txt\", header = FALSE, `\r\n1.                                      `stringsAsFactors = FALSE))`\r\n1. `afinnTerms <- read.delim(file = \"AFINN-111.txt\", header = FALSE,`\r\n1.                          `stringsAsFactors = FALSE)`\r\n1. `names(afinnTerms) <- c(\"word\", \"score\")`\r\n1. `myDict <- dictionary(afinnTerms)`\r\n1. `dfTable <- read.table('dataset.txt',header=TRUE, sep=\"|\", stringsAsFactors = FALSE)`\r\n1. `dfTxtAndSrc <- dfTable[, c(\"MediaType\",\"FullText\")]`\r\n1. `dfTxts <- dfTxtAndSrc[\"FullText\"]`\r\n1. `dfTxts$FullText[dfTxts$FullText==\"\"] <- NA`\r\n1. `dfTxtAndSrc$FullText[dfTxts$FullText==\"\"] <- NA`\r\n1. `dfTxts <- na.omit(dfTxts)`\r\n1. `dfTxtAndSrc <- na.omit(dfTxts)`\r\n1. `dfTxts <- as.data.frame(iconv(dfTxts$FullText, \"latin1\", \"ASCII\", sub=\"\"))`\r\n1. `colnames(dfTxts) = 'FullText'`\r\n1. `dfTxts$FullText <- gsub(\"[[:punct:]]\", \"\", dfTxts$FullText, perl = TRUE)`\r\n1. `dfTxts$FullText <- gsub(\"[[:digit:]]\", \"\", dfTxts$FullText, perl = TRUE)`\r\n1. `dfTxts$FullText <- gsub(\"[[:cntrl:]]\", \"\", dfTxts$FullText, perl = TRUE)`\r\n1. `dfTxts$FullText <- tolower(dfTxts$FullText)`\r\n1. `indBankA = which(sapply(dfTxts$FullText,function(x) grepl(\"banka\",x)))`\r\n1. `indBankB = which(sapply(dfTxts$FullText,function(x) grepl(\"bankb\",x)))`\r\n1. `indBankC = which(sapply(dfTxts$FullText,function(x) grepl(\"bankc\",x)))`\r\n1. `indBankD = which(sapply(dfTxts$FullText,function(x) grepl(\"bankd\",x)))`\r\n1. `indBankA = which(sapply(dfTxts$FullText,function(x) grepl(\"banka\",x)))`\r\n1. `charBankA = dfTxts[indBankA, ]`\r\n1. `corpA <- corpus(charBankA)`\r\n1. `summary(corpA)`\r\n1. `dfBankA <- as.data.frame(charBankA)`\r\n1. `txtA <- c(\"twithndlbanka choose a checking account banking managing spending banka makes easy manage banking.\")`\r\n1. `tokenize(txtA)`\r\n1. `dfmBankA<- dfm(corpA, ignoredFeatures = c(stopwords(\"english\")))`\r\n1. `plot(dfmBankA, max.words=100, random.order=FALSE, colors = brewer.pal(8, \"Dark2\"), scale=c(5, .5))`\r\n1. `dfmBankA <- dfm(corpB, ignoredFeatures = c(\"twithndlbanka\", \"name\", \"banka\",\"twithndl\",`\r\n1.                                            `\"internet\",\"rettwit\", \"bank\", \"bankb\",`\r\n1.                                            `stopwords(\"english\")))`\r\n1. `plot(dfmBankA, max.words=200, random.order=FALSE, colors = brewer.pal(8, \"Dark2\"), scale=c(4, .25))`\r\n1. `indBankB = which(sapply(dfTxts$FullText,function(x) grepl(\"bankb\",x)))`\r\n1. `charBankB = dfTxts[indBankB, ]`\r\n1. `corpB <- corpus(charBankB)`\r\n1. `summary(corpB)`\r\n1. `dfBankB<- as.data.frame(charBankB)`\r\n1. `indBankB = which(sapply(dfTxts$FullText,function(x) grepl(\"bankb\",x)))`\r\n1. `charBankB = dfTxts[indBankB, ]`\r\n1. `corpB <- corpus(charBankB)`\r\n1. `summary(corpB)`\r\n1. `dfBankB <- as.data.frame(charBankB)`\r\n1. `txtB <- c(\"twithndlbankb choose a checking account banking managing spending bankb makes easy manage banking.\")`\r\n1. `tokenize(txtB)`\r\n1. `dfmBankB <- dfm(corpB, ignoredFeatures = c(stopwords(\"english\")))`\r\n1. `plot(dfmBankB, max.words=100, random.order=FALSE, colors = brewer.pal(8, \"Dark2\"), scale=c(5, .5))`\r\n1. `dfmBankB <- dfm(corpB, ignoredFeatures = c(\"twithndlbankb\", \"name\", \"banka\",\"twithndl\",`\r\n1.                                            `\"internet\",\"rettwit\", \"bank\", \"bankc\", \"bankb\", \"bankd\",`\r\n1.                                            `stopwords(\"english\")))`\r\n1. `plot(dfmBankB, max.words=200, random.order=FALSE, colors = brewer.pal(8, \"Dark2\"), scale=c(4, .25))`\r\n1. `indBankC = which(sapply(dfTxts$FullText,function(x) grepl(\"bankc\",x)))`\r\n1. `charBankC = dfTxts[indBankC, ]`\r\n1. `corpC <- corpus(charBankC)`\r\n1. `summary(corpC)`\r\n1. `dfBankC<- as.data.frame(charBankC)`\r\n1. `indBankC = which(sapply(dfTxts$FullText,function(x) grepl(\"bankc\",x)))`\r\n1. `charBankC = dfTxts[indBankC, ]`\r\n1. `corpC <- corpus(charBankC)`\r\n1. `summary(corpC)`\r\n1. `dfBankC <- as.data.frame(charBankC)`\r\n1. `txtC <- c(\"twithndlbankc choose a checking account banking managing spending bankb makes easy manage banking.\")`\r\n1. `tokenize(txtC)`\r\n1. `dfmBankC <- dfm(corpC, ignoredFeatures = c(stopwords(\"english\")))`\r\n1. `plot(dfmBankC, max.words=100, random.order=FALSE, colors = brewer.pal(8, \"Dark2\"), scale=c(5, .5))`\r\n1. `dfmBankC <- dfm(corpC, ignoredFeatures = c(\"twithndlbankc\", \"name\", \"banka\",\"twithndl\",`\r\n1.                                            `\"internet\",\"rettwit\", \"bank\", \"bankc\", \"bankb\", \"bankd\",`\r\n1.                                            `stopwords(\"english\")))`\r\n1. `plot(dfmBankC, max.words=200, random.order=FALSE, colors = brewer.pal(8, \"Dark2\"), scale=c(4, .25))`\r\n1. `indBankD = which(sapply(dfTxts$FullText,function(x) grepl(\"bankd\",x)))`\r\n1. `charBankD = dfTxts[indBankD, ]`\r\n1. `corpD <- corpus(charBankD)`\r\n1. `summary(corpD)`\r\n1. `dfBankD<- as.data.frame(charBankD)`\r\n1. `indBankD = which(sapply(dfTxts$FullText,function(x) grepl(\"bankd\",x)))`\r\n1. `charBankD = dfTxts[indBankD, ]`\r\n1. `corpD <- corpus(charBankD)`\r\n1. `summary(corpD)`\r\n1. `dfBankD <- as.data.frame(charBankD)`\r\n1. `txtD <- c(\"twithndlbankd choose a checking account banking managing spending bankd makes easy manage banking.\")`\r\n1. `tokenize(txtD)`\r\n1. `dfmBankD <- dfm(corpD, ignoredFeatures = c(stopwords(\"english\")))`\r\n1. `plot(dfmBankD, max.words=100, random.order=FALSE, colors = brewer.pal(8, \"Dark2\"), scale=c(5, .5))`\r\n1. `dfmBankD <- dfm(corpD, ignoredFeatures = c(\"twithndlbankd\", \"name\", \"banka\",\"twithndl\",`\r\n1.                                            `\"internet\",\"rettwit\", \"bank\", \"bankc\", \"bankb\", \"bankd\",`\r\n1.                                            `stopwords(\"english\")))`\r\n1. `plot(dfmBankD, max.words=200, random.order=FALSE, colors = brewer.pal(8, \"Dark2\"), scale=c(4, .25))`\r\n\r\n\r\n### Word Clouds\r\nBank A: ![Bank A Word Cloud](https://cloud.githubusercontent.com/assets/16103047/11723423/622fe0f2-9f3c-11e5-844d-f6046ba25e63.png)\r\n\r\nBank B: ![Bank B Word Cloud](https://cloud.githubusercontent.com/assets/16103047/11723411/5041c248-9f3c-11e5-999f-d10e61184a75.png)\r\n\r\nBank C: ![Bank C Word Cloud](https://cloud.githubusercontent.com/assets/16103047/11723393/3e8b1a5e-9f3c-11e5-9e21-61b1964bc767.png)\r\n\r\nBank D: ![Bank D Word Cloud](https://cloud.githubusercontent.com/assets/16103047/11723344/0cb542de-9f3c-11e5-9ec4-2ec62101da39.png)\r\n\r\n### Conclusions\r\nThe data showed that the overall positive comments were higher in Bank A while the overall negative sentiment was highest in Bank D.  Using graphical evidence from the code, the most prevalent words were found to be associated to financial terms.  Of these, the terms were found to be either negative or positive, which shows that people usually only post when dissatisfied with the bank or had an exceptional experience.  While this does not pertain to all posts, it satisfied a large majority.\r\n\r\n\r\n### Authors and Contributors\r\nPage created by Tyler Walter.  Data and coding performed by Neal Sakash, Chase Hendley, Don Cole, and Tyler Walter.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}